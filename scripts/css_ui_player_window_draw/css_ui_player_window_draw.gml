function css_ui_player_window_draw() {
	switch(state)
		{
		case CSS_PLAYER_WINDOW_STATE.select_character:
			var _index = index;
			var _char = css_player_get(_index, CSS_PLAYER.character);
			var _color = css_player_get(_index, CSS_PLAYER.color);
			palette_shader_simple_set(character_data_get(_char, CHARACTER_DATA.palette), _color);
			draw_sprite(character_data_get(_char, CHARACTER_DATA.CSS), 0, x, y);
			shader_reset();
		
			//Ready
			if (!css_player_get(_index, CSS_PLAYER.is_cpu) && css_player_get(_index, CSS_PLAYER.ready))
				{
				draw_sprite(spr_css_ready_label, 0, x, y + 24);
				}
			break;
		case CSS_PLAYER_WINDOW_STATE.select_profile:
			draw_set_halign(fa_left);
			draw_set_valign(fa_center);
			draw_set_color(c_white);
			draw_set_font(fnt_consolas);
			for(var i = 0; i < min(ds_list_size(engine().profiles), 4); i++)
				{
				var _num = profile_scroll + i;
				var _c = $7FB252;
				if (profile_current == _num) then draw_rectangle_color(x - half_width, y - half_height + 2 + (34 * i), x + half_width - 1, y - half_height + (31) + (34 * i), _c, _c, _c, _c, false);
				draw_text(x - half_width + 28, y - half_height + 17 + (34 * i), Profile_Get(_num, PROFILE.name));
				if (Profile_Get(_num, PROFILE.autogenerated))
					{
					draw_sprite(spr_icon_profile_auto, 0, x - half_width + 4, y - half_height + 17 + (34 * i));
					}
				}
			break;
		case CSS_PLAYER_WINDOW_STATE.create_profile:
			draw_set_halign(fa_center);
			draw_set_valign(fa_center);
			draw_set_color(c_white);
			draw_set_font(fnt_consolas);
			draw_text(x, y - 32, "Profile Name:");
			draw_set_alpha(0.25);
			draw_text(x - 32, y, profile_possible_chars[modulo(profile_new_letter - 2, array_length(profile_possible_chars))]);
			draw_text(x + 32, y, profile_possible_chars[modulo(profile_new_letter + 2, array_length(profile_possible_chars))]);
			draw_set_alpha(0.75);
			draw_text(x - 16, y, profile_possible_chars[modulo(profile_new_letter - 1, array_length(profile_possible_chars))]);
			draw_text(x + 16, y, profile_possible_chars[modulo(profile_new_letter + 1, array_length(profile_possible_chars))]);
			draw_set_alpha(1);
			draw_rectangle_color(x - 9, y - 12, x + 9, y + 12, c_dkgray, c_dkgray, c_dkgray, c_dkgray, false);
			draw_text(x, y, profile_possible_chars[profile_new_letter]);
			draw_text(x, y + 32, profile_new_name);
			break;
		case CSS_PLAYER_WINDOW_STATE.controls:
			//Custom controls selection
			draw_set_halign(fa_center);
			draw_set_valign(fa_center);
			draw_set_color(c_white);
			draw_set_font(fnt_consolas);

			var _index = index;
			var _type = css_player_get(_index, CSS_PLAYER.device_type);
			var _map = custom_controls_map;
			var _pad = 34;
			var _half = 17;
			if (ds_exists(_map, ds_type_map))
				{
				var _inputs = _map[? string(_type)];
				if (_type == DEVICE.controller)
					{
					for(var i = 0; i < 4; i++)
						{
						var _num = custom_controls_scroll + i;
						var _c = $7FB252;
						var _y = (_pad * i);
						if (custom_controls_current == _num) then draw_rectangle_color(x - half_width, y - half_height + 2 + _y, x + half_width - 1, y - half_height + (_pad - 3) + _y, _c, _c, _c, _c, false);
						//Inputs
						if (_num < CC_INPUT_CONTROLLER.length)
							{
							draw_sprite(spr_icon_inputs, _num, x - half_width + 16, y - half_height + _half + _y);
							var _list = _inputs[| _num];
							for(var m = 0; m < ds_list_size(_list); m++)
								{
								draw_sprite(spr_icon_input_button_universal, _list[| m], x + half_width - 12 - (16 * m), y - half_height + _half + _y);
								}
							}
						//SCS
						else
							{
							var _n = (_num - CC_INPUT_CONTROLLER.length);
							var _scs_array = scs_convert_from_int(_map[? "SCS"]);
							if (_n == 0)
								{
								draw_set_alpha(_scs_array[_n] ? 1.0 : 0.25);
								draw_text(x, y - half_height + _half + _y, "SH Aerial");
								}
							else if (_n == 1)
								{
								draw_set_alpha(_scs_array[_n] ? 1.0 : 0.25);
								draw_text(x, y - half_height + _half + _y, "Tap Jump");
								}
							else if (_n == 2)
								{
								draw_set_alpha(_scs_array[_n] ? 1.0 : 0.25);
								draw_text(x, y - half_height + _half + _y, "A+B Smash");
								}
							else if (_n == 3)
								{
								draw_set_alpha(_scs_array[_n] ? 1.0 : 0.25);
								draw_text(x, y - half_height + _half + _y, "Smash Stick");
								}
							else if (_n == 4)
								{
								draw_set_alpha(_scs_array[_n] ? 1.0 : 0.25);
								draw_text(x, y - half_height + _half + _y, "Swap Sticks");
								}
							else if (_n == 5)
								{
								draw_set_alpha(_scs_array[_n] ? 1.0 : 0.25);
								draw_text(x, y - half_height + _half + _y, "Auto Walk");
								}
							else if (_n == 6)
								{
								draw_sprite(spr_icon_inputs, 24, x - half_width + 16, y - half_height + _half + _y);
								draw_set_halign(fa_right);
								draw_text(x + half_width - 4, y - half_height + _half + _y, Input_Name_Get(_scs_array[_n]));
								draw_set_halign(fa_center);
								}
							draw_set_alpha(1);
							}
						}
					}
				else if (_type == DEVICE.keyboard)
					{
					for(var i = 0; i < 4; i++)
						{
						var _num = custom_controls_scroll + i;
						var _c = $7FB252;
						var _y = (_pad * i);
						if (custom_controls_current == _num)
						draw_rectangle_color(x - half_width, y - half_height + 2 + _y, x + half_width - 1, y - half_height + (_pad - 3) + _y, _c, _c, _c, _c, false);
						//Inputs
						if (_num < CC_INPUT_KEYBOARD.length)
							{
							draw_set_halign(fa_right);
							draw_sprite(spr_icon_inputs, _num, x - half_width + 16, y - half_height + _half + _y);
							var _text = "";
							var _list = _inputs[| _num];
							for(var m = 0; m < ds_list_size(_list); m++)
								{
								_text += key_to_string(_list[| m]);
								}
							draw_text(x + half_width - 4, y - half_height + _half + _y, _text);
							}
						//SCS
						else
							{
							draw_set_halign(fa_center);
							var _n = (_num - CC_INPUT_KEYBOARD.length);
							var _scs_array = scs_convert_from_int(_map[? "SCS"]);
							if (_n == 0)
								{
								draw_set_alpha(_scs_array[_n] ? 1.0 : 0.25);
								draw_text(x, y - half_height + _half + _y, "SH Aerial");
								}
							else if (_n == 1)
								{
								draw_set_alpha(_scs_array[_n] ? 1.0 : 0.25);
								draw_text(x, y - half_height + _half + _y, "Tap Jump");
								}
							else if (_n == 2)
								{
								draw_set_alpha(_scs_array[_n] ? 1.0 : 0.25);
								draw_text(x, y - half_height + _half + _y, "A+B Smash");
								}
							else if (_n == 3)
								{
								draw_set_alpha(_scs_array[_n] ? 1.0 : 0.25);
								draw_text(x, y - half_height + _half + _y, "Smash Stick");
								}
							else if (_n == 4)
								{
								draw_set_alpha(_scs_array[_n] ? 1.0 : 0.25);
								draw_text(x, y - half_height + _half + _y, "Swap Sticks");
								}
							else if (_n == 5)
								{
								draw_set_alpha(_scs_array[_n] ? 1.0 : 0.25);
								draw_text(x, y - half_height + _half + _y, "Auto Walk");
								}
							else if (_n == 6)
								{
								draw_sprite(spr_icon_inputs, 24, x - half_width + 16, y - half_height + _half + _y);
								draw_set_halign(fa_right);
								draw_text(x + half_width - 4, y - half_height + _half + _y, Input_Name_Get(_scs_array[_n]));
								draw_set_halign(fa_center);
								}
							draw_set_alpha(1);
							}
						}
					draw_set_halign(fa_center);
					}
				}
			break;
		case CSS_PLAYER_WINDOW_STATE.control_set:
			//Custom controls selection
			draw_set_halign(fa_center);
			draw_set_valign(fa_center);
			draw_set_color(c_white);
			draw_set_font(fnt_consolas);
			var _type = css_player_get(index, CSS_PLAYER.device_type);
			draw_text(x, y - 16, CC_Input_Name_Get(_type, custom_controls_current) + ":");
			var _length = array_length(custom_controls_array);
			var _x = x - ((16 * _length) / 2) + 8;
			if (_type == DEVICE.controller)
				{
				for(var i = 0; i < _length; i++)
					{
					draw_sprite(spr_icon_input_button_universal, custom_controls_array[i], _x + (16 * i), y + 16);
					}
				}
			else if (_type == DEVICE.keyboard)
				{
				var _text = "";
				for(var i = 0; i < _length; i++)
					{
					_text += key_to_string(custom_controls_array[i]);
					}
				draw_text(x, y + 16, _text);
				}
			break;
		case CSS_PLAYER_WINDOW_STATE.playtesting:
			draw_set_halign(fa_center);
			draw_set_valign(fa_center);
			draw_set_color(c_white);
			draw_set_font(fnt_consolas);
			draw_text(x, y, "Coming Soon");
			break;
		}


}
